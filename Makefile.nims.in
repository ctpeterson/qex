# -*- mode: nim -*-
import strUtils
import osPaths

let extraTests = [
  "gauge/wflow.nim",
  "examples/staghmc_sh.nim",
]

var script = ""
var args = newSeq[string](0)
var nim = paramStr(0)
var nimargs = newSeq[string](0)
var qexdir = "@@QEXDIR"
var paths = [ "", qexdir/"src", qexdir ]

for i in 1..paramCount():
  let p = paramStr(i)
  if p[0]=='-':
    nimargs.add p
  else:
    if script=="": script = p
    else: args.add p

echo "Using Nim: ", nim
echo "Nim args: ", nimargs
echo "Makefile script: ", script
echo "Script args: ", args

var iarg = 0
var configTasks = newSeq[tuple[cmd:string,desc:string,f:proc(){.nimcall.}]](0)
template configTask(name: untyped; description: string; body: untyped) =
  proc `name Task`*() = body
  configTasks.add((cmd: astToStr(name), desc: description, f: `name Task`))
var buildTasks = newSeq[tuple[cmd:string,desc:string,f:proc(){.nimcall.}]](0)
template buildTask(name: untyped; description: string; body: untyped) =
  proc `name Task`*() = body
  buildTasks.add((cmd: astToStr(name), desc: description, f: `name Task`))
proc getInt(): int =
  let t = split(args[iarg],":")
  if t.len>=2: result = parseInt(t[1])
proc nimRun(f: string, outfile="")
proc addTest(runscript:var seq[string], f, outdir:string) =
  let name = f.splitFile.name
  var rj = gorge("awk '$1==\"#RUNCMD\"{$1=\"\";print}' "&f)
  if rj == "": rj = "$RUNJOB"
  let exe = outdir/name
  nimRun f, exe
  let runner = qexdir/"tests/extra"/name/"run"
  if fileExists(runner): rj = runner
  runscript.add("echo Running: "&exe)
  runscript.add(rj&" "&exe&" || failed=\"$failed "&name&"\"")


var debug = false
var run = false
var usecpp = false
var verbosity = -1

configTask debug, "set debug build":
  debug = true

configTask run, "run executable after building":
  run = true

configTask cpp, "compile in cpp mode":
  usecpp = true

configTask verb, "set build verbosity":
  verbosity = getInt()

buildTask clean, "remove nimcache dir":
  exec "rm -rf nimcache"

buildTask tests, "build unit tests":
  var runscript = @["#!/bin/sh","$SETUPJOBS","failed=''"]
  var dorun = run
  run = false
  if not dirExists("tests"):
    mkDir("tests")
  for d in listDirs(qexdir/"tests"):
    let outdir = "tests"/splitPath(d)[1]
    if not dirExists(outdir):
      mkDir(outdir)
    for f in listFiles(d):
      #echo f
      let (dir, name, ext) = splitFile(f)
      #echo dir, " ", name, " ", ext
      if name[0]=='t' and ext==".nim":
        runscript.addTest(f, outdir)
  for f in extraTests:
    let outdir = "bin"
    if not dirExists(outdir):
      mkDir outdir
    runscript.addTest(qexdir/"src"/f, outdir)
  #echo runscript.join("\n")
  runscript.add("$CLEANUPJOBS")
  runscript.add("if [ X != \"X$failed\" ];then echo Failed tests: $failed;exit 1;fi")
  runscript.add("echo $0: All tests passed")
  writeFile("testscript.sh", runscript.join("\n"))
  exec("chmod 755 testscript.sh")
  if dorun:
    exec "./testscript.sh"

proc help =
  let s = '-'.repeat(70)
  echo s
  echo "QEX build script usage:"
  echo "  make [config commands] [build commands]"
  echo s
  echo "config commands:"
  for t in configTasks:
    echo "  ", t.cmd, ": ", t.desc
  echo s
  echo "build commands:"
  for t in buildTasks:
    echo "  ", t.cmd, ": ", t.desc
  echo s
  quit 0

if args.len>0 and args[0] == "help": help()

while iarg<args.len:
  var found = false
  for t in configTasks:
    if args[iarg].len>=t.cmd.len and args[iarg][0..(t.cmd.len-1)] == t.cmd:
      found = true
      t.f()
  if not found: break
  inc iarg

if iarg>=args.len:
  echo "error: no build command given"
  help()

when fileExists("config.nims"):
  include "config.nims"

proc nimRun(f: string, outfile="") =
  var tool = ""
  #tool = "valgrind "
  var nimcmd = tool & nim & " " & join(nimargs," ") & " " & join(defargs," ")
  if run: nimcmd &= " -r "
  var (dir, name, ext) = splitFile(f)
  if outfile!="": name = outfile
  else:
    if not dirExists("bin"):
      mkDir("bin")
    name = "bin" / name
  let cc = if usecpp: "cpp" else: "c"
  let s = nimcmd & " " & cc & " -o:" & name & " " & f
  echo "running: ", s
  try:
    exec s
  except:
    echo "failed: ", s
    quit(-1)

for t in buildTasks:
  if args[iarg].startsWith(t.cmd):
    t.f()
    quit 0

proc findFile(f: string): string =
  for p in paths:
    let t = (if p == "": f else: p / f)
    echo "searching for file: ", t
    if fileExists(t): return t
proc findDir(f: string): string =
  for p in paths:
    let t = (if p == "": f else: p / f)
    echo "searching for directory: ", t
    if dirExists(t): return t

# default, treat as file or directory and compile
var cmd = args[iarg]
echo "command: ", cmd

var f = ""
block:
  var t = cmd
  if not t.endsWith(".nim"): t &= ".nim"
  f = findFile(t)
if f != "":
  nimRun(f)
else:
  f = findDir(cmd)
  if dirExists(f):
    echo "Building files in directory: ", f
    for t in listFiles(f):
      echo "file: ", t
      if t.endsWith(".nim"):
        nimRun(t)

if f == "":
  echo "unknown build target: ", cmd
