# -*- mode: nim -*-
import strUtils
import osPaths

echo "Starting config file: ", thisDir(), "/config.nims"

when not declared(qexdir):
  var qexdir = "@@QEXDIR"
var qmpdir = "@@QMPDIR"
var qiodir = "@@QIODIR"

var ccType = "@@CC_TYPE"
var cc = "@@CC"
var cflagsAlways = "@@CFLAGS_ALWAYS"
var cflagsDebug = "@@CFLAGS_DEBUG"
var cflagsSpeed = "@@CFLAGS_SPEED"
var ld = "@@LD"
var ldflags = "@@LDFLAGS"
var nimcache = thisDir() / "nimcache"
when not declared(verbosity):
  var verbosity = @@VERBOSITY
var simd = "@@SIMD"
var vlen = "@@VLEN"

#[
DBG += "--hint[XDeclaredButNotUsed]:off"
DBG += "--implicitStatic:on"
#DBG += "--listCmd"
#DBG += "--parallelBuild:4"
#DBG += "--embedsrc"
#DBG += "--genMapping"
#DBG += "--gc:refc"
#DBG += "--gc:markAndSweep"
#refc|v2|markAndSweep|boehm|go|none
]#

var defargs = newSeq[string](0)

# "set(key, val)" sets "key" to "val"
template set(key: string, val: untyped) =
  var v = astToStr(val)
  when compiles(val.type):
    when val.type is string:
      v = val
    when val.type is int:
      v = $val
  echo "setting: ", key, " <- \"", v, "\""
  when getCommand()=="e":
    defargs.add "--" & key & ":\"" & v & "\""
  else:
    switch(key, v)
# "key ~ val" sets "key" to "val"
template `~`(key,val: untyped) =
  set(astToStr(key), val)
# "key ! val" sets "ccType.key" to "val"
template `!`(key,val: untyped) =
  set(ccType & "." & astToStr(key), val)

path ~ qexdir/"src"

cc ~ ccType
exe ! cc
linkerexe ! ld
options.always ! cflagsAlways
options.debug ! cflagsDebug
options.speed ! cflagsSpeed
options.linker ! ldflags

threads ~ on
tlsEmulation ~ off
verbosity ~ verbosity
nimcache ~ nimcache
warning[SmallLshouldNotBeUsed] ~ off

when not declared(debug):
  var debug = false
  for i in 1..paramCount():
    if paramStr(i)=="-d:debug": debug = true
if not debug:
  obj_checks ~ off
  field_checks ~ off
  range_checks ~ off
  bound_checks ~ off
  overflow_checks ~ off
  assertions ~ off
  stacktrace ~ off
  linetrace ~ off
  debugger ~ off
  line_dir ~ off
  dead_code_elim ~ on
  opt ~ speed
else:
  echo "debug build"

let ss = simd.split(',')
if ss.len>0:
  for s in items(ss):
    case s
    of "QPX":
      d ~ QPX
    of "SSE":
      d ~ SSE
    of "AVX":
      d ~ AVX
    of "AVX512":
      d ~ AVX512
    else: discard

putenv ~ ("VLEN=" & vlen)

echo "Finished config file: ", thisDir(), "/config.nims"
